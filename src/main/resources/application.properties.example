# Template de configuración local (no contiene secretos)
# Copiá este archivo como application.properties y ajustá valores locales
# Nota: Spring Boot permite sobrescribir todo esto con variables de entorno
# o argumentos -D. Preferí usar variables de entorno para secretos.

# Server Configuration
server.port=8080

# Database Configuration (local)
spring.datasource.url=jdbc:postgresql://localhost:5432/springbootdb
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging
logging.level.org.springframework=INFO
logging.level.com.example=DEBUG

# SpringDoc OpenAPI Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

## JWT Configuration
# app.jwt.secret debe ser una clave Base64 válida para HS256 (256 bits)
# Para generar una: openssl rand -base64 32
app.jwt.secret=${APP_JWT_SECRET:ZmFrZV9kZWNvZGVkX2Jhc2U2NF9zZWNyZXRfa2V5X3RvX2NoYW5nZQ==}
app.jwt.expiration-ms=${APP_JWT_EXPIRATION_MS:3600000}

# Nota: En Docker Compose, estas propiedades se sobreescriben vía variables de entorno.

# Kafka (Auditoría asíncrona)
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
app.audit.topic=${APP_AUDIT_TOPIC:audit-events}
spring.kafka.consumer.auto-offset-reset=earliest
